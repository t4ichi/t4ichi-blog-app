/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * t4ichi blog API
 * t4ichi-blogのAPI
 * OpenAPI spec version: 1.0.0
 */
import type {
  OrvalGetRamenByIdParams,
  OrvalGetRamensParams,
  Ramen,
  RamenListResponse
} from '../../schemas';

import { customFetch } from '../../customFetch';

/**
 * @summary ラーメン一覧を取得
 */
export const getOrvalGetRamensUrl = (params?: OrvalGetRamensParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/ramens?${stringifiedParams}` : `/ramens`
}

export const orvalGetRamens = async (params?: OrvalGetRamensParams, options?: RequestInit): Promise<RamenListResponse> => {
  
  return customFetch<RamenListResponse>(getOrvalGetRamensUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary 特定のラーメン情報を取得
 */
export const getOrvalGetRamenByIdUrl = (id: string,
    params?: OrvalGetRamenByIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/ramens/${id}?${stringifiedParams}` : `/ramens/${id}`
}

export const orvalGetRamenById = async (id: string,
    params?: OrvalGetRamenByIdParams, options?: RequestInit): Promise<Ramen> => {
  
  return customFetch<Ramen>(getOrvalGetRamenByIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


